/*
 * Copyright (c) 2016 Jason White
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#pragma once

/**
 * There are two versions of this file:
 *  1. src/version.h.in
 *  2. src/version.h
 *
 * The second version is generated from the first. The macros in
 * `src/version.h.in` are substituted using the script `scripts/version.py`.
 *
 * The file `src/version.h` must be generated before compiling any source, or
 * the build will fail.
 */

// Major, minor, and patch version numbers. These will always be integers.
#define PEPATCH_MAJOR ${MAJOR}
#define PEPATCH_MINOR ${MINOR}
#define PEPATCH_PATCH ${PATCH}

// The output of `git describe --always --dirty`. Note that this does not
// include the major, minor, and patch versions.
#define PEPATCH_GIT_VERSION "${GIT_VERSION}"

// A short version of the commit hash. This will be >=7 characters long. As many
// characters as are needed to make the commit hash unique will be included.
// This is the output of `git describe --always`.
#define PEPATCH_GIT_COMMIT_SHORT "${GIT_COMMIT_SHORT}"

// The current full length commit hash. This is the output of `git rev-parse
// HEAD`.
#define PEPATCH_GIT_COMMIT_LONG "${GIT_COMMIT_LONG}"

#define PEPATCH_VERSION "${MAJOR}.${MINOR}.${PATCH}-${GIT_COMMIT_SHORT}"

// A pretty version in the form of "v1.0.0-226f798-dirty"
#define PEPATCH_PRETTY_VERSION "v${MAJOR}.${MINOR}.${PATCH}-${GIT_VERSION}"
